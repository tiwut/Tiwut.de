let currentFirebaseUser = null;
let pageIntersectionObserver = null;
let activeFirebaseListeners = [];
const DUMMY_EMAIL_DOMAIN = "@tiwut-dummy.internal";

const firebaseConfig = {
    apiKey: "AIzaSyCdgAfnqc_siAPdi7Ceoe8mW-wKjrRwKX0",
    authDomain: "tiwut-chat.firebaseapp.com",
    projectId: "tiwut-chat",
    databaseURL: "https://tiwut-chat-default-rtdb.europe-west1.firebasedatabase.app",
    storageBucket: "tiwut-chat.appspot.com",
    messagingSenderId: "640105042342",
    appId: "1:640105042342:web:e186683b85f367f05dbf67",
    measurementId: "G-880NY6R894"
};

let firebaseApp, firebaseAuth, firebaseDb;
let authFunctions, dbFunctions;
let swupInstance = null;

async function initializeFirebase() {
    if (!firebaseApp) {
        try {
            console.log("Attempting Firebase Initialization...");
            const { initializeApp } = await import("https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js");
            firebaseApp = initializeApp(firebaseConfig);
            const auth = await import("https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js");
            firebaseAuth = auth.getAuth(firebaseApp);
            authFunctions = auth;
            const db = await import("https://www.gstatic.com/firebasejs/9.15.0/firebase-database.js");
            firebaseDb = db.getDatabase(firebaseApp);
            dbFunctions = db;
            console.log("Firebase Initialized Successfully.");
            return true;
        } catch (error) {
            console.error("FIREBASE INITIALIZATION FAILED:", error);
            showStatusMessage("Critical Error: Could not initialize connection.", 'error', 'global-status');
            return false;
        }
    }
    return true;
}

function htmlEscape(str) { if (!str) return ''; const div = document.createElement('div'); div.textContent = str; return div.innerHTML; }
function downloadFile(content, filename, contentType = 'text/plain') { const blob = new Blob([content], { type: contentType }); const link = document.createElement('a'); link.href = URL.createObjectURL(blob); link.download = filename; document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(link.href); }
function showStatusMessage(message, type = 'info', elementId = 'form-status') { const statusEl = document.getElementById(elementId); if (!statusEl) { console.warn(`Status element #${elementId} not found.`); return; } statusEl.textContent = message; statusEl.className = 'status-message'; statusEl.style.display = 'block'; if (type === 'error') statusEl.classList.add('error-message'); else if (type === 'success') statusEl.classList.add('success-message'); else statusEl.classList.add('info-message'); }
function cleanupFirebaseListeners() { console.log(`Cleaning up ${activeFirebaseListeners.length} Firebase listeners.`); activeFirebaseListeners.forEach(unsubscribe => { try { if (typeof unsubscribe === 'function') { unsubscribe(); } else { console.warn("Listener was not a function:", unsubscribe); } } catch (e) { console.warn("Could not detach listener:", e); } }); activeFirebaseListeners = []; }

function initBasePage() {
    const animatedElements = document.querySelectorAll('.animate-on-scroll');
    if (pageIntersectionObserver) { pageIntersectionObserver.disconnect(); }
    if (animatedElements.length > 0) {
        pageIntersectionObserver = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { setTimeout(() => entry.target.classList.add('is-visible'), 50); observer.unobserve(entry.target); } }); }, { root: null, rootMargin: '0px', threshold: 0.1 });
        animatedElements.forEach(element => { element.classList.remove('is-visible'); element.style.opacity = '0'; void element.offsetWidth; element.style.opacity = ''; pageIntersectionObserver.observe(element); });
    }
    const heroAnimatedElements = document.querySelectorAll('.hero .slide-in-up');
    if (heroAnimatedElements.length > 0) {
        heroAnimatedElements.forEach(el => {
            el.style.animation = 'none'; el.classList.remove('delay-1', 'delay-2'); void el.offsetWidth;
            el.style.opacity = ''; el.style.transform = ''; let delayClass = '';
            if (el.matches('p')) delayClass = 'delay-1'; if (el.matches('a.cta-button')) delayClass = 'delay-2';
            el.style.animation = `slideInUp 0.8s ease-out forwards`;
            el.style.animationDelay = delayClass ? (delayClass === 'delay-1' ? '0.2s' : '0.4s') : '0s';
            if (delayClass) { el.classList.add(delayClass); }
        });
    }
    initContextMenu();
    initAccountDropdown();
}
function initContextMenu() { const contextMenu = document.getElementById('custom-context-menu'); if (!contextMenu) return; const copyBtn = contextMenu.querySelector('[data-action="copy"]'); const pasteBtn = contextMenu.querySelector('[data-action="paste"]'); const cutBtn = contextMenu.querySelector('[data-action="cut"]'); document.addEventListener('contextmenu', (e) => { e.preventDefault(); const targetIsEditable = e.target.isContentEditable || e.target.matches('input, textarea'); if (copyBtn) copyBtn.disabled = !document.getSelection()?.toString(); if (cutBtn) cutBtn.disabled = !targetIsEditable || !document.getSelection()?.toString(); if (pasteBtn) pasteBtn.disabled = !targetIsEditable; const { clientX: mouseX, clientY: mouseY } = e; const { normalizedX, normalizedY } = normalizePozition(mouseX, mouseY, contextMenu); contextMenu.style.top = `${normalizedY}px`; contextMenu.style.left = `${normalizedX}px`; contextMenu.classList.add('context-visible'); }); document.addEventListener('click', (e) => { if (contextMenu.classList.contains('context-visible') && !contextMenu.contains(e.target)) { contextMenu.classList.remove('context-visible'); } }); contextMenu.addEventListener('click', (e) => { const action = e.target.closest('button')?.dataset.action; if (action) { try { switch(action) { case 'copy': document.execCommand('copy'); break; case 'cut': document.execCommand('cut'); break; case 'paste': alert("Paste via context menu might be restricted. Use Ctrl+V / Cmd+V."); break; } } catch (err) { console.error(`Context menu action '${action}' failed:`, err); } contextMenu.classList.remove('context-visible'); } }); const normalizePozition = (mouseX, mouseY, contextMenuNode) => { const { left: scopeOffsetX, top: scopeOffsetY } = document.body.getBoundingClientRect(); const scopeX = mouseX - scopeOffsetX; const scopeY = mouseY - scopeOffsetY; const outOfBoundsOnX = scopeX + contextMenuNode.clientWidth > window.innerWidth; const outOfBoundsOnY = scopeY + contextMenuNode.clientHeight > window.innerHeight; let normalizedX = mouseX; let normalizedY = mouseY; if (outOfBoundsOnX) normalizedX = scopeOffsetX + scopeX - contextMenuNode.clientWidth; if (outOfBoundsOnY) normalizedY = scopeOffsetY + scopeY - contextMenuNode.clientHeight; return { normalizedX, normalizedY }; }; }
function initWordEditor() { console.log("Init Word"); const editor = document.getElementById('text-editor'); const boldButton = document.getElementById('bold-btn'); const italicButton = document.getElementById('italic-btn'); const ulButton = document.getElementById('ul-btn'); const downloadButton = document.getElementById('download-odt-btn'); if (!editor || !boldButton || !italicButton || !ulButton || !downloadButton) return; boldButton.addEventListener('click', () => document.execCommand('bold', false, null)); italicButton.addEventListener('click', () => document.execCommand('italic', false, null)); ulButton.addEventListener('click', () => document.execCommand('insertUnorderedList', false, null)); downloadButton.addEventListener('click', () => { const htmlContent = `<html><head><meta charset="UTF-8"></head><body>${editor.innerHTML}</body></html>`; downloadFile(htmlContent, 'document.odt', 'application/vnd.oasis.opendocument.text'); }); editor.addEventListener('keyup', updateButtonStates); editor.addEventListener('mouseup', updateButtonStates); editor.addEventListener('focus', updateButtonStates); function updateButtonStates() { if (!document.queryCommandState) return; boldButton.classList.toggle('active', document.queryCommandState('bold')); italicButton.classList.toggle('active', document.queryCommandState('italic')); ulButton.classList.toggle('active', document.queryCommandState('insertUnorderedList')); } }
function initExcelEditor() { console.log("Init Excel"); const table = document.querySelector('.spreadsheet-table'); const downloadButton = document.getElementById('download-ods-btn'); if (!table || !downloadButton) return; const cells = table.querySelectorAll('td'); cells.forEach(cell => { cell.addEventListener('focus', () => { cell.setAttribute('contenteditable', 'true'); }); cell.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); cell.blur(); } }); }); downloadButton.addEventListener('click', () => { let csvContent = ""; const rows = table.querySelectorAll('tbody tr'); rows.forEach(row => { const cols = row.querySelectorAll('td'); const rowData = Array.from(cols).map(cell => `"${(cell.textContent || '').replace(/"/g, '""')}"`); csvContent += rowData.join(',') + "\n"; }); downloadFile(csvContent, 'spreadsheet.ods', 'text/csv'); }); }
function initPowerPointEditor() { console.log("Init PowerPoint"); let slides = document.querySelectorAll('.slide'); const prevButton = document.getElementById('prev-slide'); const nextButton = document.getElementById('next-slide'); const addSlideButton = document.getElementById('add-slide'); const downloadButton = document.getElementById('download-odp-btn'); const presentationContainer = document.querySelector('.presentation-container'); let currentSlideIndex = 0; if (!slides.length || !prevButton || !nextButton || !addSlideButton || !presentationContainer || !downloadButton) return; function showSlide(index) { slides.forEach((slide, i) => { slide.classList.toggle('active-slide', i === index); }); currentSlideIndex = index; prevButton.disabled = (index === 0); nextButton.disabled = (index === slides.length - 1); } prevButton.addEventListener('click', () => { if (currentSlideIndex > 0) showSlide(currentSlideIndex - 1); }); nextButton.addEventListener('click', () => { if (currentSlideIndex < slides.length - 1) showSlide(currentSlideIndex + 1); }); addSlideButton.addEventListener('click', () => { const newSlide = document.createElement('div'); newSlide.classList.add('slide'); newSlide.innerHTML = `<h2 contenteditable="true">New Slide ${slides.length + 1}</h2><div class="slide-textarea" contenteditable="true" placeholder="Enter text here..."></div>`; presentationContainer.insertBefore(newSlide, document.querySelector('.slide-nav')); slides = document.querySelectorAll('.slide'); showSlide(slides.length - 1); }); downloadButton.addEventListener('click', () => { let htmlContent = `<html><head><meta charset="UTF-8"></head><body>`; slides.forEach((slide, index) => { htmlContent += `<div style="page-break-after: always; border: 1px solid black; padding: 20px; margin-bottom: 20px;"><h2>Slide ${index + 1}</h2>${slide.innerHTML}</div>`; }); htmlContent += `</body></html>`; downloadFile(htmlContent, 'presentation.odp', 'text/html'); }); showSlide(0); }
async function initLoginPage() { console.log("Init Login Page"); const loginForm = document.getElementById('login-form'); if (!loginForm) return; loginForm.addEventListener('submit', async (e) => { e.preventDefault(); const username = loginForm.username.value.trim(); const password = loginForm.password.value; if (!username || !password) { showStatusMessage('Please enter username and password.', 'error', 'login-status'); return; } const fakeEmail = `${username.toLowerCase()}${DUMMY_EMAIL_DOMAIN}`; showStatusMessage('Logging in...', 'info', 'login-status'); try { await authFunctions.signInWithEmailAndPassword(firebaseAuth, fakeEmail, password); showStatusMessage('Login successful! Redirecting...', 'success', 'login-status'); window.location.href = 'index.html'; } catch (error) { console.error("Login failed:", error); let message = `Login failed: ${error.message}`; if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') { message = 'Login failed: Invalid username or password.'; } else if (error.code === 'auth/invalid-email') { message = 'Login failed: Invalid username format.'; } showStatusMessage(message, 'error', 'login-status'); } }); }
async function initRegisterPage() { console.log("Init Register Page"); const registerForm = document.getElementById('register-form'); const termsCheckbox = document.getElementById('terms'); const submitButton = registerForm?.querySelector('button[type="submit"]'); if (!registerForm || !termsCheckbox || !submitButton) return; submitButton.disabled = !termsCheckbox.checked; termsCheckbox.addEventListener('change', () => { submitButton.disabled = !termsCheckbox.checked; }); registerForm.addEventListener('submit', async (e) => { e.preventDefault(); if (!termsCheckbox.checked) { showStatusMessage('You must accept the terms and conditions.', 'error', 'register-status'); return; } const displayName = registerForm.displayName.value.trim(); const username = registerForm.username.value.trim(); const password = registerForm.password.value; const passwordConfirm = registerForm.passwordConfirm.value; if (password !== passwordConfirm) { showStatusMessage('Passwords do not match!', 'error', 'register-status'); return; } if (!username) { showStatusMessage('Please enter a username!', 'error', 'register-status'); return; } if (!displayName) { showStatusMessage('Please enter a display name!', 'error', 'register-status'); return; } if (!/^[a-zA-Z0-9_]{3,20}$/.test(username)) { showStatusMessage('Username must be 3-20 characters (letters, numbers, underscore).', 'error', 'register-status'); return; } showStatusMessage('Registering...', 'info', 'register-status'); const fakeEmail = `${username.toLowerCase()}${DUMMY_EMAIL_DOMAIN}`; const normalizedUsername = username.toLowerCase(); const usernameRef = dbFunctions.ref(firebaseDb, `usernames/${normalizedUsername}`); try { const usernameSnap = await dbFunctions.get(usernameRef); if (usernameSnap.exists()) { throw new Error("Username already taken. Please choose another."); } const userCredential = await authFunctions.createUserWithEmailAndPassword(firebaseAuth, fakeEmail, password); const user = userCredential.user; await authFunctions.updateProfile(user, { displayName: displayName }); const userProfileRef = dbFunctions.ref(firebaseDb, `users/${user.uid}/profile`); const usernameMapData = {}; usernameMapData[`usernames/${normalizedUsername}`] = user.uid; usernameMapData[`users/${user.uid}/profile`] = { displayName: displayName }; await dbFunctions.update(dbFunctions.ref(firebaseDb), usernameMapData); showStatusMessage('Registration successful! Redirecting...', 'success', 'register-status'); window.location.href = 'index.html'; } catch (error) { console.error("Registration failed:", error); let message = `Registration failed: ${error.message}`; if (error.code === 'auth/email-already-in-use') { message = 'Registration failed: Username already taken.'; } else if (error.code === 'auth/invalid-email') { message = 'Registration failed: Invalid username format.'; } else if (error.code === 'auth/weak-password') { message = 'Registration failed: Password is too weak (min 6 characters).'; } showStatusMessage(message, 'error', 'register-status'); } }); }
async function initChatListPage() { console.log("Init Chat List Page"); if (!firebaseDb) { console.error("Firebase DB not initialized for Chat List"); return; } const chatroomsRef = dbFunctions.ref(firebaseDb, 'chatrooms'); const listElement = document.getElementById('chat-room-list'); const searchInput = document.getElementById('chat-search'); const createBtn = document.getElementById('create-chat-btn'); const formContainer = document.getElementById('create-chat-form-container'); const chatForm = document.getElementById('create-chat-form'); const cancelBtn = document.getElementById('cancel-chat-btn'); const newChatNameInput = document.getElementById('new-chat-name'); if (!listElement || !searchInput || !createBtn || !formContainer || !chatForm || !cancelBtn || !newChatNameInput) { console.warn("Chat List UI elements not found."); return; } let allChatrooms = {}; createBtn.style.display = currentFirebaseUser ? 'inline-block' : 'none'; if (!currentFirebaseUser) { formContainer.classList.remove('visible'); createBtn.textContent = 'Create New Chat'; } const unsubscribeChatrooms = dbFunctions.onValue(chatroomsRef, (snapshot) => { allChatrooms = snapshot.val() || {}; renderChatList(allChatrooms, searchInput.value.toLowerCase()); }, (error) => { console.error("Error loading chat rooms:", error); listElement.innerHTML = '<li class="no-chats" style="color: red;">Error loading chat rooms.</li>'; }); activeFirebaseListeners.push(unsubscribeChatrooms); searchInput.addEventListener('input', (e) => { renderChatList(allChatrooms, e.target.value.toLowerCase()); }); function renderChatList(rooms, filter) { listElement.innerHTML = ''; let hasRooms = false; Object.entries(rooms).forEach(([roomId, roomData]) => { if (roomData && roomData.name && roomData.name.toLowerCase().includes(filter)) { hasRooms = true; const li = document.createElement('li'); li.dataset.roomId = roomId; li.innerHTML = `<span class="room-name">${htmlEscape(roomData.name)}</span><span class="room-creator">by ${htmlEscape(roomData.creatorName || 'Unknown')}</span><a href="chat.html?roomId=${roomId}" class="cta-button room-join-btn" data-no-swup>Join</a>`; li.querySelector('.room-join-btn').addEventListener('click', (e) => { e.preventDefault(); window.location.href = `chat.html?roomId=${roomId}`; }); listElement.appendChild(li); } }); if (!hasRooms && filter) { listElement.innerHTML = '<li class="no-chats">No matching chat rooms found.</li>'; } else if (!hasRooms && !currentFirebaseUser) { listElement.innerHTML = '<li class="no-chats">No chat rooms found. Log in to create one!</li>';} else if (!hasRooms) { listElement.innerHTML = '<li class="no-chats">No chat rooms available yet. Create one!</li>';} } if(createBtn) { createBtn.onclick = () => { if (!currentFirebaseUser) return; formContainer.classList.toggle('visible'); createBtn.textContent = formContainer.classList.contains('visible') ? 'Cancel Creation' : 'Create New Chat'; }; } if(cancelBtn) { cancelBtn.onclick = () => { formContainer.classList.remove('visible'); createBtn.textContent = 'Create New Chat'; newChatNameInput.value = ''; }; } if(chatForm) { chatForm.addEventListener('submit', async (e) => { e.preventDefault(); const chatName = newChatNameInput.value.trim(); if (chatName && currentFirebaseUser) { try { const newChatRef = dbFunctions.push(chatroomsRef); await dbFunctions.set(newChatRef, { name: chatName, creatorUid: currentFirebaseUser.uid, creatorName: currentFirebaseUser.displayName || 'Anonymous', createdAt: dbFunctions.serverTimestamp() }); newChatNameInput.value = ''; formContainer.classList.remove('visible'); createBtn.textContent = 'Create New Chat'; } catch (error) { console.error("Error creating chat room:", error); alert("Could not create chat room. Please try again."); } } else if (!chatName) { alert("Please enter a name for the chat room."); } else { alert("You must be logged in to create a chat room."); } }); } }
async function initChatRoomPage() { console.log("Init Chat Room Page"); const urlParams = new URLSearchParams(window.location.search); const roomId = urlParams.get('roomId'); const chatTitleElement = document.getElementById('chat-room-title'); const chatbox = document.getElementById('chatbox'); const messageInput = document.getElementById('message'); const usernameInput = document.getElementById('username'); const sendButton = document.getElementById('send'); const statusDiv = document.getElementById('status'); const inputArea = document.getElementById('input-area'); if (!firebaseDb) { console.error("Firebase DB not initialized for Chat Room"); return;} if (!roomId) { console.error("No Room ID specified!"); if(statusDiv) statusDiv.textContent = "Error: No chat room specified!"; if(chatbox) chatbox.innerHTML = '<p style="color:red;">Invalid chat room link.</p>'; if(window.swupInstance) window.swupInstance.loadPage({ url: '/chat_list.html' }); else window.location.href = 'chat_list.html'; return; } if(statusDiv) statusDiv.textContent = `Status: Connecting to room ${roomId.substring(0,6)}...`; if(chatbox) chatbox.innerHTML = '<p>Loading messages...</p>'; if (currentFirebaseUser) { if(usernameInput && currentFirebaseUser.displayName) { usernameInput.value = currentFirebaseUser.displayName; usernameInput.disabled = true; } else if (usernameInput) { usernameInput.value = "Anonymous"; usernameInput.disabled = true; } if(messageInput) messageInput.disabled = false; if(sendButton) sendButton.disabled = false; if(inputArea) inputArea.style.display = 'flex'; } else { if(usernameInput) { usernameInput.value = "Read-Only"; usernameInput.disabled = true; } if(messageInput) messageInput.disabled = true; if(sendButton) sendButton.disabled = true; if(inputArea) inputArea.style.display = 'none'; if(statusDiv) statusDiv.textContent = 'Status: Read-only mode (Log in to chat)'; } const specificChatMessagesRef = dbFunctions.ref(firebaseDb, `chats/${roomId}/messages`); const messagesQuery = dbFunctions.query(specificChatMessagesRef, dbFunctions.orderByChild('timestamp'), dbFunctions.limitToLast(100)); const roomMetaRef = dbFunctions.ref(firebaseDb, `chatrooms/${roomId}/name`); const unsubRoomName = dbFunctions.onValue(roomMetaRef, (snapshot) => { const roomName = snapshot.val(); if(chatTitleElement && roomName) { chatTitleElement.textContent = `Chat: ${htmlEscape(roomName)}`; } else if (chatTitleElement) { chatTitleElement.textContent = `Chat: ${roomId.substring(0,6)}...`; } if(statusDiv && currentFirebaseUser) statusDiv.textContent = 'Status: Connected'; }, (error) => { console.error("Error getting room name:", error); if(chatTitleElement) chatTitleElement.textContent = `Chat: ${roomId.substring(0,6)}...`; if(statusDiv && currentFirebaseUser) statusDiv.textContent = 'Status: Connected (name error)'; }, { onlyOnce: true }); activeFirebaseListeners.push(unsubRoomName); const unsubscribeMessages = dbFunctions.onChildAdded(messagesQuery, (snapshot) => { if (chatbox && chatbox.innerHTML.includes('Loading messages')) { chatbox.innerHTML = ''; } displayMessage(snapshot); }, (error) => { console.error("Receive Error:", error); if(statusDiv) statusDiv.textContent = `Receive Error: ${error.code}`; if(chatbox) chatbox.innerHTML += `<p style="color:red;">Error receiving messages.</p>`; }); activeFirebaseListeners.push(unsubscribeMessages); function displayMessage(snapshot) { if(!chatbox) return; const messageData = snapshot.val(); if (!messageData) return; const messageId = snapshot.key; const username = htmlEscape(messageData.username || 'Unknown'); const messageText = htmlEscape(messageData.text || ''); const timestamp = messageData.timestamp; if (typeof timestamp !== 'number') { console.warn("Skipped msg with invalid timestamp:", messageId, messageData); return; } const date = new Date(timestamp); const timeString = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' }); const messageElement = document.createElement('p'); messageElement.dataset.messageId = messageId; messageElement.innerHTML = `<strong>${username}:</strong> ${messageText} <span class="timestamp">(${timeString})</span>`; chatbox.appendChild(messageElement); const isScrolledToBottom = chatbox.scrollHeight - chatbox.clientHeight <= chatbox.scrollTop + 30; if (isScrolledToBottom) { chatbox.scrollTop = chatbox.scrollHeight; } } function sendChatMessage() { if (!currentFirebaseUser) return; const username = usernameInput.value.trim() || currentFirebaseUser.displayName || "Anonymous"; const messageText = messageInput.value.trim(); if (username && messageText) { if(sendButton) sendButton.disabled = true; dbFunctions.push(specificChatMessagesRef, { username: username, text: messageText, timestamp: dbFunctions.serverTimestamp() }) .then(() => { if(messageInput) { messageInput.value = ''; messageInput.focus(); } }) .catch((error) => { console.error("Send Error: ", error); if(statusDiv) statusDiv.textContent = `Send Error: ${error.message}`; }) .finally(() => { if(sendButton) sendButton.disabled = false; }); } else if (!messageText) { alert('Please enter a message!'); } } if(sendButton) sendButton.onclick = sendChatMessage; if(messageInput) messageInput.onkeypress = function(event) { if (event.key === 'Enter') { sendChatMessage(); } }; }
async function logoutUser() { console.log("Logging out..."); try { await authFunctions.signOut(firebaseAuth); console.log("User signed out."); window.location.href = 'index.html'; } catch (error) { console.error("Logout failed:", error); alert("Logout failed. Please try again."); } }
function updateUIBasedOnAuthState(user) { const loggedInMenu = document.querySelector('.logged-in-menu'); const loggedOutElements = document.querySelectorAll('.logged-out'); const accountTrigger = document.getElementById('account-menu-trigger'); if (user) { currentFirebaseUser = { uid: user.uid, email: user.email, displayName: user.displayName }; console.log("User logged in:", currentFirebaseUser.displayName || user.uid); loggedOutElements.forEach(el => el.style.display = 'none'); if(loggedInMenu) loggedInMenu.style.display = 'inline-block'; if (accountTrigger) { accountTrigger.textContent = user.displayName || 'Account'; } } else { currentFirebaseUser = null; console.log("User logged out."); loggedOutElements.forEach(el => el.style.display = 'inline-block'); if(loggedInMenu) loggedInMenu.style.display = 'none'; } }
function initAccountDropdown() { console.log("Init Account Dropdown"); const trigger = document.getElementById('account-menu-trigger'); const dropdown = document.getElementById('account-dropdown'); const logoutBtn = document.getElementById('logout-button-dropdown'); if (!trigger || !dropdown || !logoutBtn) return; if (!trigger.dataset.listenerAttached) { trigger.addEventListener('click', (e) => { e.stopPropagation(); dropdown.classList.toggle('visible'); }); trigger.dataset.listenerAttached = 'true'; } if (!logoutBtn.dataset.listenerAttached) { logoutBtn.addEventListener('click', logoutUser); logoutBtn.dataset.listenerAttached = 'true'; } document.addEventListener('click', (e) => { if (dropdown.classList.contains('visible') && !trigger.contains(e.target) && !dropdown.contains(e.target)) { dropdown.classList.remove('visible'); } }, true); }

function initPage() {
    initBasePage();
    if (document.getElementById('login-form')) { initLoginPage(); }
    else if (document.getElementById('register-form')) { initRegisterPage(); }
    else if (document.getElementById('chat-room-list')) { initChatListPage(); }
    else if (document.getElementById('chatbox') && window.location.pathname.includes('chat.html')) { initChatRoomPage(); }
    else if (document.getElementById('text-editor')) { initWordEditor(); }
    else if (document.querySelector('.spreadsheet-table')) { initExcelEditor(); }
    else if (document.querySelector('.presentation-container')) { initPowerPointEditor(); }
}

document.addEventListener('DOMContentLoaded', async () => {
    console.log("DOM fully loaded");
    const firebaseReady = await initializeFirebase();
    if (!firebaseReady) { console.error("Firebase failed to initialize. Site functionality will be limited."); return; }
    let authCheckComplete = false;
    let swupInstanceCreated = false;
    const unsubscribeAuth = authFunctions.onAuthStateChanged(firebaseAuth, (user) => {
         updateUIBasedOnAuthState(user);
         authCheckComplete = true;
         if (!swupInstanceCreated) { initializeSwupAndFirstPage(); }
    }, (error) => {
         console.error("Auth State Listener Error:", error);
         authCheckComplete = true;
         if (!swupInstanceCreated) { initializeSwupAndFirstPage(); }
    });
    // Auth Listener aktiv lassen für UI Updates

    function initializeSwupAndFirstPage() {
        if(swupInstanceCreated) return;
        swupInstanceCreated = true;
        try {
            window.swupInstance = new Swup({
                animationSelector: '[class*="transition-"]',
                linkSelector: 'a[href^="/"]:not([data-no-swup]), a[href^="./"]:not([data-no-swup]), a[href^="../"]:not([data-no-swup]), a[href]:not([href^="mailto:"]):not([href^="tel:"]):not([target="_blank"]):not([download]):not(.room-join-btn)'
            });
            const navLinks = document.querySelectorAll('.main-header nav a');
            navLinks.forEach((link, index) => { if(link.href) link.dataset.navIndex = index; });
            let currentPageIndex = null;
            function getPageIndex(url) { const path = new URL(url, window.location.origin).pathname.split('/').pop() || 'index.html'; for (let i = 0; i < navLinks.length; i++) { if(!navLinks[i].href) continue; const linkPath = new URL(navLinks[i].href, window.location.origin).pathname.split('/').pop() || 'index.html'; if (linkPath === path) { const navIndex = navLinks[i].dataset.navIndex; return navIndex !== undefined ? parseInt(navIndex, 10) : null; } } return null; }
            currentPageIndex = getPageIndex(window.location.href);
            if (currentPageIndex !== null) { document.documentElement.dataset.currentPageIndex = currentPageIndex; }

            window.swupInstance.hooks.on('visit:start', (visit) => {
                 const targetElement = visit.trigger.el;
                 const targetIndex = targetElement?.dataset?.navIndex ? parseInt(targetElement.dataset.navIndex, 10) : null;
                 const currentIndex = document.documentElement.dataset.currentPageIndex ? parseInt(document.documentElement.dataset.currentPageIndex, 10) : null;
                 document.documentElement.classList.remove('is-sliding-left', 'is-sliding-right');
                 const swupContainer = document.querySelector('#swup');
                 if (targetIndex !== null && currentIndex !== null) {
                     if (targetIndex > currentIndex) { document.documentElement.classList.add('is-sliding-right'); if(swupContainer) swupContainer.className = 'transition-slide'; }
                     else if (targetIndex < currentIndex) { document.documentElement.classList.add('is-sliding-left'); if(swupContainer) swupContainer.className = 'transition-slide'; }
                     else { if(swupContainer) swupContainer.className = 'transition-fade'; }
                 } else { if(swupContainer) swupContainer.className = 'transition-fade'; }
            });
             window.swupInstance.hooks.on('page:view', (visit) => {
                 cleanupFirebaseListeners();
                 window.scrollTo(0, 0);
                 currentPageIndex = getPageIndex(window.location.href);
                 if (currentPageIndex !== null) { document.documentElement.dataset.currentPageIndex = currentPageIndex; }
                 else { delete document.documentElement.dataset.currentPageIndex; }
                 updateUIBasedOnAuthState(currentFirebaseUser);
                 initPage();
             });
            window.swupInstance.hooks.on('visit:end', (visit) => { document.documentElement.classList.remove('is-sliding-left', 'is-sliding-right'); });

            if (authCheckComplete) { setTimeout(initPage, 50); }
             else { console.log("Waiting for auth check before initial page init..."); }
            console.log("Swup initialized.");
        } catch (e) { if (typeof Swup === 'undefined') { console.error("Swup library not loaded."); } else { console.error("Error initializing Swup:", e); } }
     }
});